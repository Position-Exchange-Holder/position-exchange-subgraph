type PositionVault @entity {
  id: ID!
  totalCompoundTransactions: BigInt!
  totalRewardPaidForCompounder: BigInt!
  totalUniqueCompounders: BigInt!
  createdBlockNumber: BigInt!
  createdTimestamp: BigInt!
  updatedTimestamp: BigInt!
}

interface UserInterface {
  id: ID!
  totalRewardEarned: BigInt!
  createdBlockNumber: BigInt!
  createdTimestamp: BigInt!
  updatedTimestamp: BigInt!
}

type Compounder implements UserInterface @entity {
  id: ID!
  transactions: [CompoundTransaction!]! @derivedFrom(field: "sender")
  totalCompoundTransactions: BigInt!
  totalRewardEarned: BigInt!
  createdBlockNumber: BigInt!
  createdTimestamp: BigInt!
  updatedTimestamp: BigInt!
}

type User implements UserInterface @entity {
  id: ID!
  transactions: [HarvestTransaction!]! @derivedFrom(field: "sender")
  totalHarvestTransactions: BigInt!
  totalRewardEarned: BigInt!
  createdBlockNumber: BigInt!
  createdTimestamp: BigInt!
  updatedTimestamp: BigInt!
}

interface TransactionInterface {
  id: ID!
  reward: BigInt!
  gasLimit: BigInt!
  gasPrice: BigInt!
  createdBlockNumber: BigInt!
  createdTimestamp: BigInt!
}

type CompoundTransaction implements TransactionInterface @entity {
  id: ID!
  type: String!
  reward: BigInt!
  sender: Compounder!
  gasLimit: BigInt!
  gasPrice: BigInt!
  createdBlockNumber: BigInt!
  createdTimestamp: BigInt!
}

type HarvestTransaction implements TransactionInterface @entity {
  id: ID!
  reward: BigInt!
  sender: User!
  gasLimit: BigInt!
  gasPrice: BigInt!
  createdBlockNumber: BigInt!
  createdTimestamp: BigInt!
}